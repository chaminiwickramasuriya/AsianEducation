/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ijse.sms.view;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.ijse.sms.common.IDGeneretor;
import com.ijse.sms.common.validation;
import com.ijse.sms.controller.ExamsController;
import com.ijse.sms.controller.RegistrationController;
import com.ijse.sms.controller.StudentController;
import com.ijse.sms.controller.SubjectController;
import com.ijse.sms.core.dto.ExamsDTO;
import com.ijse.sms.core.dto.RegistrationDTO;
import com.ijse.sms.core.dto.StudentDTO;
import com.ijse.sms.core.dto.SubjectDTO;

/**
 *
 * @author Chamini
 */
public class ExamsForm extends javax.swing.JPanel {

    /**
     * Creates new form ExamsForm
     */
    String subId = "";

    public ExamsForm() {
        initComponents();
        txtRegId.requestFocus();
        loadSubjectName();
        setDate();
        getAllExams();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtRegId = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtStuName = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        txtExamId = new javax.swing.JTextField();
        cmbSubName = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtMarks = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblExam = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        cmbGrade = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setLayout(null);

        jLabel3.setBackground(new java.awt.Color(0, 51, 102));
        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel3.setText("Registration Id");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(70, 119, 120, 30);

        txtRegId.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtRegId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRegIdActionPerformed(evt);
            }
        });
        jPanel1.add(txtRegId);
        txtRegId.setBounds(200, 120, 220, 30);

        jLabel7.setBackground(new java.awt.Color(0, 51, 102));
        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel7.setText("Student Name");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(70, 160, 110, 30);

        txtStuName.setEditable(false);
        txtStuName.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtStuName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStuNameActionPerformed(evt);
            }
        });
        jPanel1.add(txtStuName);
        txtStuName.setBounds(200, 160, 220, 30);
        jPanel1.add(jSeparator1);
        jSeparator1.setBounds(80, 202, 340, 2);

        jLabel4.setBackground(new java.awt.Color(0, 51, 102));
        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel4.setText("Exam Id");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(80, 280, 80, 30);

        txtExamId.setEditable(false);
        txtExamId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtExamIdActionPerformed(evt);
            }
        });
        jPanel1.add(txtExamId);
        txtExamId.setBounds(200, 280, 220, 30);

        cmbSubName.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbSubName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSubNameItemStateChanged(evt);
            }
        });
        cmbSubName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSubNameActionPerformed(evt);
            }
        });
        jPanel1.add(cmbSubName);
        cmbSubName.setBounds(200, 220, 220, 30);

        jLabel8.setBackground(new java.awt.Color(0, 51, 102));
        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel8.setText("Date");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(80, 320, 60, 30);

        txtDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateActionPerformed(evt);
            }
        });
        jPanel1.add(txtDate);
        txtDate.setBounds(200, 320, 220, 30);

        jLabel6.setBackground(new java.awt.Color(0, 51, 102));
        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel6.setText("Marks");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(80, 360, 70, 30);

        txtMarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMarksActionPerformed(evt);
            }
        });
        txtMarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMarksKeyReleased(evt);
            }
        });
        jPanel1.add(txtMarks);
        txtMarks.setBounds(200, 360, 220, 30);

        tblExam.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tblExam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Registration Id", "Exam Id", "Exam Name", "Marks", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblExam);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(450, 80, 690, 350);

        btnUpdate.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel1.add(btnUpdate);
        btnUpdate.setBounds(760, 460, 80, 30);

        delete.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        delete.setText("Delete Exam");
        delete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        jPanel1.add(delete);
        delete.setBounds(850, 460, 130, 30);

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton1.setText("Clear");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(1000, 460, 80, 30);

        cmbGrade.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbGrade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Grade 01", "Grade 02", "Grade 03", "Grade 04", "Grade 05", "Grade 06", "Grade 07", "Grade 08", "Grade 09", "Grade 10", "Grade 11", "" }));
        cmbGrade.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbGradeItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbGrade);
        cmbGrade.setBounds(70, 220, 110, 30);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/background.png"))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 1190, 680);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1188, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtRegIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRegIdActionPerformed
        try {
            // TODO add your handling code here:
            String rid = txtRegId.getText();

            RegistrationDTO search = RegistrationController.search(new RegistrationDTO(rid));
            StudentDTO searchStudent = new StudentDTO();
            searchStudent.setId(search.getStuid());
            StudentDTO searchStudent1 = StudentController.searchStudent(searchStudent);
            txtStuName.setText(searchStudent1.getName());
            getAllExamsForEach();

        } catch (Exception ex) {
            Logger.getLogger(ExamsForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtMarks.requestFocus();
    }//GEN-LAST:event_txtRegIdActionPerformed

    private void txtStuNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStuNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStuNameActionPerformed

    private void txtExamIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtExamIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtExamIdActionPerformed

    private void cmbSubNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSubNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSubNameActionPerformed

    private void txtDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateActionPerformed

    private void txtMarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMarksActionPerformed
        try {
            String rid = txtRegId.getText();
            String eId = txtExamId.getText();

            String eName = cmbSubName.getSelectedItem().toString();
            String grade = cmbGrade.getSelectedItem().toString();
            String eMarks = txtMarks.getText();
            String date = txtDate.getText();

            ArrayList<SubjectDTO> allId = SubjectController.getAllId();
            for (SubjectDTO allSub1 : allId) {
                if (allSub1.getSubName().equals(eName)) {
                    subId = allSub1.getSubId();
                }
            }
            System.out.println(eId + "" + rid + "" + subId + "" + eName + "" + date + "" + eMarks);
            //String examId, String regId, String subId, String examName, String examDate, int examMark
            ExamsDTO exam = new ExamsDTO(eId, rid, subId, grade, eName, date, Integer.parseInt(eMarks));
            boolean addExams = ExamsController.addExams(exam);

            if (addExams) {
                getAllExamsForEach();
                JOptionPane.showMessageDialog(this, "Addedd Successfully.");

            } else {
                JOptionPane.showMessageDialog(this, "Adedd Failed..");
            }
        } catch (Exception ex) {
            Logger.getLogger(ExamsForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        autoGenerateID();
    }//GEN-LAST:event_txtMarksActionPerformed

    private void txtMarksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMarksKeyReleased
        // TODO add your handling code here:
        validation.numberOnly(txtMarks);
    }//GEN-LAST:event_txtMarksKeyReleased

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            // TODO add your handling code here:
            String rId = txtRegId.getText();
            String date = txtDate.getText();
            String subName = cmbSubName.getSelectedItem().toString();
            ArrayList<SubjectDTO> allId = SubjectController.getAllId();
            for (SubjectDTO allSub1 : allId) {
                if (allSub1.getSubName().equals(subName)) {
                    subId = allSub1.getSubId();
                }
            }
            String grade = cmbGrade.getSelectedItem().toString();
            String eId = (String) tblExam.getValueAt(tblExam.getSelectedRow(), 1);
            String marks = (String) tblExam.getValueAt(tblExam.getSelectedRow(), 3);
            ExamsDTO exam = new ExamsDTO(eId, rId, subId, grade, subName, date, Integer.parseInt(marks));
            boolean updateExam = ExamsController.updateExams(exam);
            System.out.println(updateExam);
            if (updateExam) {
                getAllExamsForEach();
                JOptionPane.showMessageDialog(this, "Update Successfully.");

            } else {

                JOptionPane.showMessageDialog(this, "Update Failed.");

            }
        } catch (Exception ex) {
            Logger.getLogger(ExamsForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        try {
            // TODO add your handling code here:
            String rId = txtRegId.getText();
            String eId = (String) tblExam.getValueAt(tblExam.getSelectedRow(), 1);
            String subId1 = "";
            String grade = cmbGrade.getSelectedItem().toString();
            String eName = cmbSubName.getSelectedItem().toString();
            String date = txtDate.getText();
            String eMarks = "0";
            if (!txtMarks.getText().equals("") && txtMarks.getText() != null) {
                eMarks = txtMarks.getText();
            }

            ArrayList<SubjectDTO> allId = SubjectController.getAllId();
            for (SubjectDTO allSub1 : allId) {
                if (allSub1.getSubName().equals(eName)) {
                    subId1 = allSub1.getSubId();
                }
            }
            ExamsDTO exam = new ExamsDTO(eId, rId, subId1, grade, eName, date, Integer.parseInt(eMarks));
            boolean deleteExam = ExamsController.deleteExams(exam);
            if (deleteExam) {

                JOptionPane.showMessageDialog(this, "Delete Successfully.");
                getAllExamsForEach();
            } else {
                JOptionPane.showMessageDialog(this, "Delete Failed..");

            }
        } catch (Exception ex) {
            Logger.getLogger(ExamsForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        autoGenerateID();
        //exam ek regId ekta galapenna genarate wenne na.
    }//GEN-LAST:event_deleteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        txtMarks.setText("");
        txtRegId.setText("");
        txtStuName.setText("");
        // clearTableData();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmbSubNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSubNameItemStateChanged
        try {
            // TODO add your handling code here:
            String grade = cmbGrade.getSelectedItem().toString();
            String subName = cmbSubName.getSelectedItem().toString();
            ArrayList<SubjectDTO> allId = SubjectController.getAllId();

            if (grade != null) {
                for (SubjectDTO allSub1 : allId) {
                    if (allSub1.getSubName().equals(subName)) {
                        subId = allSub1.getSubId();
                        autoGenerateID();
//                        try {
//                            txtExamId.setText(IDGeneretor.getExamIDs("Exams", "Exam_Id", "Sub_Id", "Grade", "E"));
//                        } catch (SQLException ex) {
//                            Logger.getLogger(ExamsForm.class.getName()).log(Level.SEVERE, null, ex);
//                        } catch (ClassNotFoundException ex) {
//                            Logger.getLogger(ExamsForm.class.getName()).log(Level.SEVERE, null, ex);

//                        aimath run karanna balanna
//                        }
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(ExamsForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        autoGenerateID();

    }//GEN-LAST:event_cmbSubNameItemStateChanged

    private void cmbGradeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbGradeItemStateChanged
        autoGenerateID();
    }//GEN-LAST:event_cmbGradeItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cmbGrade;
    private javax.swing.JComboBox cmbSubName;
    private javax.swing.JButton delete;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tblExam;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtExamId;
    private javax.swing.JTextField txtMarks;
    private javax.swing.JTextField txtRegId;
    private javax.swing.JTextField txtStuName;
    // End of variables declaration//GEN-END:variables

    private void getAllExamsForEach() {

        try {
            ArrayList<ExamsDTO> searchExam = ExamsController.getEachExams(txtRegId.getText());
            DefaultTableModel dtm = (DefaultTableModel) tblExam.getModel();
            dtm.setRowCount(0);

            if (searchExam != null) {
                for (ExamsDTO searchExams1 : searchExam) {
                    dtm.addRow(new Object[]{searchExams1.getRegId(), searchExams1.getExamId(), searchExams1.getExamName(), searchExams1.getExamMark(), searchExams1.getExamDate()});
                }
            } else {
                JOptionPane.showMessageDialog(null, "There is no Exams such that Student..!!");
            }
        } catch (Exception ex) {
            Logger.getLogger(ExamsForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void autoGenerateID() {
        String regNo = txtRegId.getText();
        try {
            txtExamId.setText(IDGeneretor.getExamIDs("Exams", "Exam_Id", getSubID(), cmbGrade.getSelectedItem().toString(), "E"));
        } catch (SQLException ex) {
            Logger.getLogger(ExamsForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ExamsForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(ExamsForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void clearTableData() {
        DefaultTableModel dtm = (DefaultTableModel) tblExam.getModel();
        dtm.setRowCount(0);
    }

    private void loadSubjectName() {
        try {
            ArrayList<SubjectDTO> allSub = SubjectController.getAllId();
            cmbSubName.removeAll();
            if (allSub == null) {
                return;
            }
            for (SubjectDTO allSub1 : allSub) {
                cmbSubName.addItem(allSub1.getSubName());
            }
        } catch (Exception ex) {
            Logger.getLogger(ExamsForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setDate() {
        Date d = new Date();
        SimpleDateFormat sDate = new SimpleDateFormat("YYYY-MM-dd");
        String sd = sDate.format(d);
        txtDate.setText(sd);
    }

    private void getAllExams() {
        try {
            ArrayList<ExamsDTO> searchExam = ExamsController.getAllExams();
            DefaultTableModel dtm = (DefaultTableModel) tblExam.getModel();
            dtm.setRowCount(0);

            if (searchExam != null) {
                for (ExamsDTO searchExams1 : searchExam) {
                    dtm.addRow(new Object[]{searchExams1.getRegId(), searchExams1.getExamId(), searchExams1.getExamName(), searchExams1.getExamMark(), searchExams1.getExamDate()});
                }
            } else {
                JOptionPane.showMessageDialog(null, "There is no Exams such that Student..!!");
            }
        } catch (Exception ex) {
            Logger.getLogger(ExamsForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String getSubID() throws Exception {
        String eName = cmbSubName.getSelectedItem().toString();
        String sub = "";
        ArrayList<SubjectDTO> allId = SubjectController.getAllId();
        for (SubjectDTO allSub1 : allId) {
            if (allSub1.getSubName().equals(eName)) {
                sub = allSub1.getSubId();
            }
        }
        return sub;
    }
}
