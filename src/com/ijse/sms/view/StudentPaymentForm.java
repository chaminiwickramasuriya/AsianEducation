/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ijse.sms.view;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.ijse.sms.common.IDGeneretor;
import com.ijse.sms.common.validation;
import com.ijse.sms.controller.RegistrationController;
import com.ijse.sms.controller.StudentController;
import com.ijse.sms.controller.StudentPaymentsController;
import com.ijse.sms.controller.SubjectController;
import com.ijse.sms.core.dto.RegistrationDTO;
import com.ijse.sms.core.dto.StudentDTO;
import com.ijse.sms.core.dto.StudentPaymentsDTO;
import com.ijse.sms.core.dto.SubjectDTO;
import lk.ijse.jasper.Report;

/**
 *
 * @author Chamini
 */
@Report("com.ijse.sms.reports")
public class StudentPaymentForm extends javax.swing.JPanel {

    /**
     * Creates new form StudentPaymentForm
     */
    int fees;
    String subid;

    public StudentPaymentForm() {
        initComponents();
        setDate();
        LoadIDGenarator();
        getAllPayments();
        loadSubjects();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblPAStuId = new javax.swing.JLabel();
        txtRId = new javax.swing.JTextField();
        lblPADate = new javax.swing.JLabel();
        txtPADate = new javax.swing.JTextField();
        lblPAPayID = new javax.swing.JLabel();
        txtStuName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPayNo = new javax.swing.JTextField();
        lblPAFee = new javax.swing.JLabel();
        txtPAFee = new javax.swing.JTextField();
        cmbMonth = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        cmbSubject = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblpay = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPayments = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setLayout(null);

        lblPAStuId.setBackground(new java.awt.Color(0, 51, 102));
        lblPAStuId.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblPAStuId.setText("Registration ID");
        jPanel1.add(lblPAStuId);
        lblPAStuId.setBounds(10, 50, 110, 20);

        txtRId.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtRId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRIdActionPerformed(evt);
            }
        });
        jPanel1.add(txtRId);
        txtRId.setBounds(130, 40, 130, 30);

        lblPADate.setBackground(new java.awt.Color(0, 51, 102));
        lblPADate.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblPADate.setText("Date");
        jPanel1.add(lblPADate);
        lblPADate.setBounds(280, 50, 40, 20);

        txtPADate.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtPADate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPADateActionPerformed(evt);
            }
        });
        jPanel1.add(txtPADate);
        txtPADate.setBounds(330, 40, 120, 30);

        lblPAPayID.setBackground(new java.awt.Color(0, 51, 102));
        lblPAPayID.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblPAPayID.setText("Student Name");
        jPanel1.add(lblPAPayID);
        lblPAPayID.setBounds(20, 90, 100, 20);

        txtStuName.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jPanel1.add(txtStuName);
        txtStuName.setBounds(130, 80, 320, 30);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel3.setText("Payment No");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(30, 130, 90, 20);

        txtPayNo.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtPayNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPayNoActionPerformed(evt);
            }
        });
        jPanel1.add(txtPayNo);
        txtPayNo.setBounds(130, 120, 130, 30);

        lblPAFee.setBackground(new java.awt.Color(0, 51, 102));
        lblPAFee.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblPAFee.setText("Fee");
        jPanel1.add(lblPAFee);
        lblPAFee.setBounds(290, 180, 30, 20);

        txtPAFee.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtPAFee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPAFeeActionPerformed(evt);
            }
        });
        txtPAFee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPAFeeKeyReleased(evt);
            }
        });
        jPanel1.add(txtPAFee);
        txtPAFee.setBounds(330, 170, 120, 30);

        cmbMonth.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "Auguest", "september", "Octomber", "November", "December" }));
        jPanel1.add(cmbMonth);
        cmbMonth.setBounds(320, 120, 130, 30);

        jLabel4.setBackground(new java.awt.Color(0, 51, 102));
        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel4.setText("Total Amount");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(150, 450, 130, 30);

        txtTotal.setEditable(false);
        txtTotal.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        txtTotal.setForeground(new java.awt.Color(51, 0, 0));
        txtTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalActionPerformed(evt);
            }
        });
        jPanel1.add(txtTotal);
        txtTotal.setBounds(300, 440, 160, 40);

        btnAdd.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jPanel1.add(btnAdd);
        btnAdd.setBounds(220, 510, 80, 30);

        btnUpdate.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel1.add(btnUpdate);
        btnUpdate.setBounds(310, 510, 80, 30);

        btnDelete.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btnDelete);
        btnDelete.setBounds(400, 510, 80, 30);

        cmbSubject.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jPanel1.add(cmbSubject);
        cmbSubject.setBounds(30, 170, 250, 30);

        tblpay.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tblpay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject", "Fee"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblpay);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(20, 220, 430, 120);

        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton2.setText("Find");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(380, 350, 59, 25);

        tblPayments.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tblPayments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Registratioin ID", "Month", "Date", "Subject", "Fee"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPayments);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(490, 40, 630, 440);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/background.png"))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 1140, 570);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1139, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtRIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRIdActionPerformed
        try {
            // TODO add your handling code here:
            String rid = txtRId.getText();
            RegistrationDTO regit = new RegistrationDTO(rid);
            RegistrationDTO search = RegistrationController.search(regit);
            StudentDTO stu = new StudentDTO();
            stu.setId(search.getStuid());
            StudentDTO searchEachStudent = StudentController.searchStudent(stu);
            txtStuName.setText(searchEachStudent.getName());

            //  getAllPaymentsForEach();
            txtPAFee.requestFocus();
        } catch (Exception ex) {
            Logger.getLogger(StudentPaymentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtRIdActionPerformed

    private void txtPayNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPayNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPayNoActionPerformed

    private void txtPAFeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPAFeeActionPerformed
        // TODO add your handling code here:
        String subject = cmbSubject.getSelectedItem().toString();
        String payFee = txtPAFee.getText();

        DefaultTableModel dtm = (DefaultTableModel) tblpay.getModel();
        Object[] all = {subject, payFee};
        dtm.addRow(all);


    }//GEN-LAST:event_txtPAFeeActionPerformed

    private void txtPAFeeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPAFeeKeyReleased
        // TODO add your handling code here:
        validation.numberOnly(txtPAFee);

    }//GEN-LAST:event_txtPAFeeKeyReleased

    private void txtTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalActionPerformed

    }//GEN-LAST:event_txtTotalActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed

        try {
            // TODO add your handling code here:
            String payNO = txtPayNo.getText();
            String rId = txtRId.getText();
            String date = txtPADate.getText();

            String total = txtTotal.getText();
            String month = cmbMonth.getSelectedItem().toString();

            subid = "";
            boolean addPayment = false;
            ArrayList<SubjectDTO> allId = SubjectController.getAllId();
            for (int i = 0; i < tblpay.getRowCount(); i++) {
                
                    fees = Integer.parseInt((String) tblpay.getValueAt(i, 1));
                    String subject = (String) tblpay.getValueAt(i, 0);

                    
                    for (SubjectDTO allSub1 : allId) {
                        if (allSub1.getSubName().equals(subject)) {
                            subid = allSub1.getSubId();
                        }
                    }
                    StudentPaymentsDTO payment = new StudentPaymentsDTO(txtPayNo.getText(), rId, subid, date, month, fees);
                    addPayment = StudentPaymentsController.addPayment(payment);
                    if (addPayment == false) {
                        break;
                    }else{
                        LoadIDGenarator();
                    }
                //dan run karala balanna...
            }

            if (addPayment) {
                getAllPaymentsForEach();
                JOptionPane.showMessageDialog(this, "Adedd Successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Adedd Failed..");
            }

        } catch (Exception ex) {
            Logger.getLogger(StudentPaymentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        LoadIDGenarator();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            // TODO add your handling code here:
            String rId = (String) tblPayments.getValueAt(tblPayments.getSelectedRow(), 0);
            String payNo = txtPayNo.getText();
            String date = (String) tblPayments.getValueAt(tblPayments.getSelectedRow(), 3);
            String month = (String) tblPayments.getValueAt(tblPayments.getSelectedRow(), 2);
            int amount = (int) tblPayments.getValueAt(tblPayments.getSelectedRow(), 5);
            //        String payNo, String reg_Id, String date, int subNo, String month, int amount
            StudentPaymentsDTO payment = new StudentPaymentsDTO(payNo, rId, subid, date, month, amount);
            boolean updatePayment = StudentPaymentsController.updatePayment(payment);
            if (updatePayment) {
                JOptionPane.showMessageDialog(this, "Update Successfull.");
                fees = 0;
                getAllPaymentsForEach();
            } else {
                JOptionPane.showMessageDialog(this, "Update Failed..");
            }
        } catch (Exception ex) {
            Logger.getLogger(StudentPaymentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            // TODO add your handling code here:
            String rid = (String) tblPayments.getValueAt(tblPayments.getSelectedRow(), 0);
            String date = (String) tblPayments.getValueAt(tblPayments.getSelectedRow(), 3);
            StudentPaymentsDTO payment = new StudentPaymentsDTO(rid, date);
            boolean deletePayment = StudentPaymentsController.deletePayment(payment);
            if (deletePayment) {
                getAllPaymentsForEach();
                JOptionPane.showMessageDialog(this, "Delete Successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Delete Failed.");
            }
        } catch (Exception ex) {
            Logger.getLogger(StudentPaymentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        LoadIDGenarator();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtPADateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPADateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPADateActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        txtTotal.setText(Integer.toString(getSum()));
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JComboBox cmbSubject;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblPADate;
    private javax.swing.JLabel lblPAFee;
    private javax.swing.JLabel lblPAPayID;
    private javax.swing.JLabel lblPAStuId;
    private javax.swing.JTable tblPayments;
    private javax.swing.JTable tblpay;
    private javax.swing.JTextField txtPADate;
    private javax.swing.JTextField txtPAFee;
    private javax.swing.JTextField txtPayNo;
    private javax.swing.JTextField txtRId;
    private javax.swing.JTextField txtStuName;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    private void getAllPaymentsForEach() {
        try {
            ArrayList<StudentPaymentsDTO> searchPayment = StudentPaymentsController.getEachPay(txtRId.getText());
            DefaultTableModel dtm = (DefaultTableModel) tblPayments.getModel();
            dtm.setRowCount(0);
            if (searchPayment != null) {
                for (StudentPaymentsDTO searchPayment1 : searchPayment) { //String payNo, String reg_Id, String date, int subNo, String month, int amount
                    ArrayList<SubjectDTO> allId = SubjectController.getAllId();
                    for (SubjectDTO allId1 : allId) {
                        if (allId1.getSubId().equals(searchPayment1.getSubId())) {
                            dtm.addRow(new Object[]{searchPayment1.getReg_Id(), searchPayment1.getMonth(), searchPayment1.getDate(), allId1.getSubName(), searchPayment1.getFee()});
                        }
                    }
                    
                }
            } else {
                JOptionPane.showMessageDialog(null, "There is no Payments such that Student..!!");
            }
        } catch (Exception ex) {
            Logger.getLogger(StudentPaymentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void LoadIDGenarator() {
        try {
            String ss = IDGeneretor.getStudentPaymentsIDs("StudentPayments", "SPay_No", "P");
            txtPayNo.setText(ss);
        } catch (SQLException ex) {
            Logger.getLogger(StudentPaymentForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(StudentPaymentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setDate() {
        Date d1 = new Date();
        SimpleDateFormat fdate = new SimpleDateFormat("YYYY-MM-dd");
        String sd = fdate.format(d1);
        txtPADate.setText(sd);
    }

    private void getAllPayments() {
        try {
            ArrayList<StudentPaymentsDTO> searchExam = StudentPaymentsController.getAllPayments();
            DefaultTableModel dtm = (DefaultTableModel) tblPayments.getModel();
            dtm.setRowCount(0);
//            
//             String rid = txtRId.getText();
//            RegistrationDTO regit = new RegistrationDTO(rid);
//            RegistrationDTO search = RegistrationController.search(regit);
//            StudentDTO stu = new StudentDTO();
//            stu.setId(search.getStuid());
//            StudentDTO searchEachStudent = StudentController.searchStudent(stu);
//            txtStuName.setText(searchEachStudent.getName());
//               RegistrationDTO search = RegistrationController.search(new RegistrationDTO(rid));
//            StudentDTO searchStudent = new StudentDTO();
//            searchStudent.setId(search.getStuid());
//            StudentDTO searchStudent1 = StudentController.searchStudent(searchStudent);
//            txtStuName.setText(searchStudent1.getName());
            if (searchExam != null) {
                for (StudentPaymentsDTO searchExams1 : searchExam) {

                    dtm.addRow(new Object[]{searchExams1.getReg_Id(), searchExams1.getMonth(), searchExams1.getDate(), searchExams1.getSubId(), searchExams1.getFee()});
                }
            } else {
                JOptionPane.showMessageDialog(null, "There is no attendence such that Student..!!");
            }
        } catch (Exception ex) {
            Logger.getLogger(StudentPaymentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadSubjects() {
        try {
            ArrayList<SubjectDTO> all = SubjectController.getAllId();
            cmbSubject.removeAllItems();
            if (all == null) {
                return;
            }
            for (SubjectDTO all1 : all) {
                cmbSubject.addItem(all1.getSubName());
            }
        } catch (Exception ex) {
            Logger.getLogger(StudentPaymentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private int getSum() {
        int sum = 0;
        int rowCount = tblpay.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            sum = sum + Integer.parseInt(tblpay.getValueAt(i, 1).toString());

        }
        return sum;
    }
}
